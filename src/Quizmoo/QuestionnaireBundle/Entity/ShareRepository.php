<?php

namespace Quizmoo\QuestionnaireBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ShareRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShareRepository extends EntityRepository
{
	public function findShareEntity($questionnaire,$manager,$agent){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.questionnaire = :questionnaire and s.manager = :manager and s.agent = :agent')
      ->setParameter('questionnaire', $questionnaire)
      ->setParameter('manager', $manager)
      ->setParameter('agent', $agent)
      ->getOneOrNullResult();
  	}

  public function findListByManagerAndSurvey($questionnaire,$manager){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.questionnaire = :questionnaire and s.manager = :manager')
      ->setParameter('questionnaire', $questionnaire)
      ->setParameter('manager', $manager)
      ->getResult();
  }
  //check if the manager share survey with agent
  public function findShareBySurveyAndAgent($questionnaire,$agent){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.questionnaire = :questionnaire and s.agent = :agent')
      ->setParameter('questionnaire', $questionnaire)
      ->setParameter('agent', $agent)
      ->getOneOrNullResult();
  }

  public function findListOfSurveysByAgent($agent){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.agent = :agent order by s.created DESC ')
      ->setParameter('agent', $agent)
      ->getResult();
  }

  public function findByAgentAndManager($agent,$manager){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.agent = :agent and s.manager = :manager')
      ->setParameter('agent', $agent)
      ->setParameter('manager', $manager)
      ->getResult();
  }

  public function findListBySurvey($questionnaire){
       return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.questionnaire = :questionnaire')
      ->setParameter('questionnaire', $questionnaire)
      ->getResult();
  }


    ///////////////// REMOVE before update or commit
    //number of received surveys
    public function getNumberOfReceivedSurveys($user,$categorieId){
        if($categorieId == 41 ){
            $em =  $this->getEntityManager() ;
            $queryBuilder = $em -> createQueryBuilder('QuizmooQuestionnaireBundle:Questionnaire');
            $queryBuilderSub = $em -> createQueryBuilder('QuizmooQuestionnaireBundle:Share');
            $queryBuilderSub-> add('select',' DISTINCT IDENTITY(S.questionnaire )')
                -> add('from','QuizmooQuestionnaireBundle:Share S')
                -> add('where','S.agent = '.$user->getId());

            $query = $queryBuilder
                -> add('select','Q')
                -> add('from','QuizmooQuestionnaireBundle:Questionnaire Q')
                -> add('where',$queryBuilder->expr()->in("Q.id",$queryBuilderSub->getDQL()));

            return $query->getQuery()->getResult();
        }else{
            return $this->getEntityManager()
                ->createQuery('SELECT s,q FROM QuizmooQuestionnaireBundle:Share s JOIN s.questionnaire q WHERE s.agent = :user and q.categorie = :categorie_id order by s.created DESC ')
                ->setParameter('user', $user)
                ->setParameter('categorie_id', $categorieId)
                ->getResult();
        }
    }


  //number of received surveys
  public function numberOfReceivedSurveys($user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
      ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.agent = :user order by s.created DESC ')
      ->setParameter('user', $user)
      ->getResult();
    }else{
    return $this->getEntityManager()
    ->createQuery('SELECT s,q FROM QuizmooQuestionnaireBundle:Share s JOIN s.questionnaire q WHERE s.agent = :user and q.categorie = :categorie_id order by s.created DESC ')
    ->setParameter('user', $user)
    ->setParameter('categorie_id', $categorieId)
    ->getResult();
   }
 }

 /**
   * Get a $range  revceived surveys starting from $start
   * @param  [type] $start start point 
   * @param  [type] $range number of revceived surveys to get after the start point
   * @return [type] range of revceived surveys
   */
  public function findRangeOfReceivedSurveys($start , $range ,$user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT s FROM QuizmooQuestionnaireBundle:Share s WHERE s.agent = :user order by s.created DESC ')
            ->setParameter('user', $user)
            ->setFirstResult(($start-1) * $range)
            ->setMaxResults($range)
                  ->getResult();
    }else{
    return $this->getEntityManager()
            ->createQuery('SELECT s,q FROM QuizmooQuestionnaireBundle:Share s JOIN s.questionnaire q WHERE s.agent = :user and q.categorie = :categorie_id order by s.created DESC ')
            ->setParameter('user', $user)
            ->setParameter('categorie_id', $categorieId)
            ->setFirstResult(($start-1) * $range)
            ->setMaxResults($range)
                  ->getResult();
    }
  }
  

}
