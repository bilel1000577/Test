<?php

namespace Quizmoo\QuestionnaireBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * QuestionnaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionnaireRepository extends EntityRepository
{

  public function findByHash($hash)
  {
       
        $qb = $this->createQueryBuilder('q')
        ->where('q.hash = :hash')
        ->setParameter('hash', $hash);
        return $qb->getQuery()
                  ->getOneOrNullResult();
        
  }
  
  //fetch the entities questionnaires from db
  public function getMQuestionnaires($order_by = array(), $offset = 0, $limit = 0, $userId) {
    //Create query builder 
    $qb = $this->createQueryBuilder('q')
               ->innerJoin('q.user', 'u', 'WITH' , 'u.id = :user_id' )
               ->setParameter('user_id', $userId);
    //Show all if offset and limit not set, also show all when limit is 0
    if ((isset($offset)) && (isset($limit))) {
        if ($limit > 0) {
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }
        //else we want to display all items on one page
    }
    
    //Adding defined sorting parameters from variable into query
    if (isset($order_by)) {
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'q.id' . $key . ' ' . $value);
        }
    }
    
    //Get our query
    $q = $qb->getQuery();
    //Return result
    return $q->getResult();
}

public function getCount() {
    $query = $this->createQueryBuilder('q')
            ->select('COUNT(q.id)')
            ->getQuery();
    return  $query->getSingleScalarResult();
}


  //number of questions per state
  public function numberOfQuestionsPerState($state,$userId){
    $qb = $this->createQueryBuilder('q')
        ->innerJoin('q.user', 'u', 'WITH' , 'u.id = :user_id' )
        ->where('q.state = :state')
        ->setParameter('state', $state)
        ->setParameter('user_id', $userId);
        return $qb->getQuery()
                 ->getResult();
  }
  //pagination ongoing questions
  public function findRangeOfEntitiesOnGoing($start,$range,$user,$state){
       return $this->getEntityManager()
      ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.user = :user and q.state = :state')
      ->setParameter('user', $user)
      ->setParameter('state', $state)
      ->setFirstResult(($start-1) * $range)
      ->setMaxResults($range)
            ->getResult();
  }

  // new index 

  //number of ongoing surveys
  public function numberOfSurveysOngoing($user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 0 and q.user = :user')
            ->setParameter('user', $user)
            ->getResult();
    }else{
    return $this->getEntityManager()
          ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 0 and q.user = :user and q.categorie = :categorie_id')
          ->setParameter('user', $user)
          ->setParameter('categorie_id', $categorieId)
          ->getResult();
    }
  }

  /**
   * Get a $range  ongoing surveys  starting from $start
   * @param  [type] $start start point 
   * @param  [type] $range number of surveys to get after the start point
   * @return [type] range of surveys 
   */
  public function findRangeOfSurveysOngoing($start , $range ,$user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
    ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 0 and q.user = :user order by q.created DESC ')
    ->setParameter('user', $user)
    ->setFirstResult(($start-1) * $range)
    ->setMaxResults($range)
          ->getResult();
  }else{
    return $this->getEntityManager()
    ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 0 and q.user = :user and q.categorie = :categorie_id order by q.created DESC ')
    ->setParameter('user', $user)
    ->setParameter('categorie_id', $categorieId)
    ->setFirstResult(($start-1) * $range)
    ->setMaxResults($range)
          ->getResult();
  }
  }
  
  //number of closed surveys
  public function numberOfSurveysClosed($user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 2 and q.user = :user')
            ->setParameter('user', $user)
            ->getResult();
    }else{
    return $this->getEntityManager()
          ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 2 and q.user = :user and q.categorie = :categorie_id ')
          ->setParameter('user', $user)
          ->setParameter('categorie_id', $categorieId)
          ->getResult();

    }
  }

  /**
   * Get a $range  closed surveys starting from $start
   * @param  [type] $start start point 
   * @param  [type] $range number of closed surveys to get after the start point
   * @return [type] range of closed surveys
   */
  public function findRangeOfSurveysClosed($start , $range ,$user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 2 and  q.user = :user order by q.created DESC')
            ->setParameter('user', $user)
            ->setFirstResult(($start-1) * $range)
            ->setMaxResults($range)
                  ->getResult();
    }else{
    return $this->getEntityManager()
          ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 2 and  q.user = :user and q.categorie = :categorie_id order by q.created DESC')
          ->setParameter('user', $user)
          ->setParameter('categorie_id', $categorieId)
          ->setFirstResult(($start-1) * $range)
          ->setMaxResults($range)
                ->getResult();

    }
  }

  //number of drafts surveys
  public function numberOfSurveysInDrafts($user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 1 and q.isTemplate is NULL and q.user = :user')
            ->setParameter('user', $user)
            ->getResult();
    }else{
    return $this->getEntityManager()
          ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 1 and q.isTemplate is NULL and q.user = :user and q.categorie = :categorie_id ')
          ->setParameter('user', $user)
          ->setParameter('categorie_id', $categorieId)
          ->getResult();

    }
  }

  /**
   * Get a $range  drafts surveys starting from $start
   * @param  [type] $start start point 
   * @param  [type] $range number of drafts surveys to get after the start point
   * @return [type] range of drafts surveys
   */
  public function findRangeOfSurveysDrafts($start , $range ,$user,$categorieId){
    if($categorieId == 41 ){
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 1 and q.isTemplate is NULL and  q.user = :user  order by q.created DESC')
            ->setParameter('user', $user)
            ->setFirstResult(($start-1) * $range)
            ->setMaxResults($range)
                  ->getResult();
    }else{
    return $this->getEntityManager()
            ->createQuery('SELECT q FROM QuizmooQuestionnaireBundle:Questionnaire q WHERE q.state = 1 and q.isTemplate is NULL and  q.user = :user and q.categorie = :categorie_id order by q.created DESC')
            ->setParameter('user', $user)
            ->setParameter('categorie_id', $categorieId)
            ->setFirstResult(($start-1) * $range)
            ->setMaxResults($range)
                  ->getResult();
    }
  }

}

